name: check-deployment

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - master
      - develop

defaults:
  # Set shell for steps inside containers (default=sh)
  run:
    shell: bash

jobs:
  #--------------------------------------------------------------
  # CHECK DEPLOYMENT
  #--------------------------------------------------------------
  check-deployment:
    env:
      FUNCTION: costnotifier
      RUNTIME: python3.9
    # For public repos use runs-on: ubuntu-latest
    # For private repos use runs-on: self-hosted
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - uses: actions/checkout@v3

      # To test whether the deployment package is up to date, we only check the application code (excluding dependencies).
      - name: üõ†Ô∏è build deployment
        run: |
          cp $FUNCTION-$RUNTIME.zip $FUNCTION-$RUNTIME.zip_original
          cd $FUNCTION
          zip -r ../$FUNCTION-$RUNTIME.zip .
      - name: üîç check deployment
        run: |
          # Compare length and names of files in Zip.
          # Building in Docker doesn't work, some files are still different.
          [[ -f $FUNCTION-$RUNTIME.zip ]] || { echo "Deployment file not found."; exit 1; }
          diff \
            <(unzip -vqq $FUNCTION-$RUNTIME.zip  | awk '{$2=""; $3=""; $4=""; $5=""; $6=""; print}' | sort -k3 -f) \
            <(unzip -vqq $FUNCTION-$RUNTIME.zip_original  | awk '{$2=""; $3=""; $4=""; $5=""; $6=""; print}' | sort -k3 -f)
          FILES_CHANGED=$?
          echo FILES_CHANGED=$FILES_CHANGED
